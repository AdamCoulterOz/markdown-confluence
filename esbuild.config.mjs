import esbuild from "esbuild";
import process from "process";
import builtins from 'builtin-modules'
import { writeFileSync } from 'fs';


const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;


const mermaid_renderer_plugin = {
	name: 'mermaid_renderer_plugin',
	setup(build) {
		build.onResolve({ filter: /mermaid_renderer\.esbuild$/ }, args => {
			return {
				watchFiles: ['src/mermaid_renderer.js'],
				path: args.path,
				namespace: 'mermaid-binary',
			  }
		});
		build.onLoad({ filter: /mermaid_renderer\.esbuild$/, namespace: 'mermaid-binary' }, async (args) => {
			const result = await esbuild.build({
				entryPoints: ['src/mermaid_renderer.js'],
				bundle: true,
				format: 'cjs',
				target: 'chrome106',
				logLevel: 'info',
				sourcemap: false,
				treeShaking: true,
				write: false,
				mainFields: ['module', 'main'],
				minify: true,
			}).catch(() => process.exit(1));

			const fileContents = `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Mermaid Chart</title>
  </head>
  <body>
  	<div id="graphDiv"></div>
    <script type="text/javascript">
	${result.outputFiles[0].text}
	</script>
  </body>
</html>
			`;

			return {
				contents: fileContents,
				loader: 'binary',
			}
		})
	}
};

const prod = (process.argv[2] === 'production');

const buildConfig = {
	banner: {
		js: banner,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins
	],
	format: 'cjs',
	target: 'chrome106',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outdir: prod ? 'dist' : 'dev-vault/.obsidian/plugins/obsidian-confluence',
	mainFields: ['module', 'main'],
	plugins: [mermaid_renderer_plugin],
	minify: true,
	metafile: true,
};

if (prod) {
	const buildResult = await esbuild.build(buildConfig);
	writeFileSync("./dist/meta.json", JSON.stringify(buildResult.metafile));
} else {
	const context = await esbuild.context(buildConfig);
	await context.watch();
}